//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Richie/Scripts/Input Actions/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Richie
{
    public partial class @PlayerInput : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerInput()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""defence"",
            ""id"": ""86aa8eb7-483d-4648-b518-04e3950d57c3"",
            ""actions"": [
                {
                    ""name"": ""left"",
                    ""type"": ""Button"",
                    ""id"": ""a744634f-2b3b-4d63-ab29-0885261a0c97"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""right"",
                    ""type"": ""Button"",
                    ""id"": ""6b20d319-48f3-419f-bbf6-928c28f88b8d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""move"",
                    ""type"": ""Value"",
                    ""id"": ""ed612622-e838-4e71-88c4-50c6afc37ec5"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""scroll"",
                    ""type"": ""Value"",
                    ""id"": ""e8460cb4-1e30-4fc3-9d00-20e0d6e48d05"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""mouse"",
                    ""type"": ""PassThrough"",
                    ""id"": ""5ee1f947-198f-4f81-b7e6-ee8f7120765b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""center"",
                    ""type"": ""Button"",
                    ""id"": ""8e7b8eff-2ec7-4984-95f6-b95509e4f54d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8379890d-783c-4d6b-9c11-04fdf4cd7c9d"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0fa0dd65-8546-4ddf-8651-4e5d3772e5e8"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""22544ae1-480c-4c7f-9504-948d4c494c79"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""8121d8f1-6781-49df-b6db-b014879f88f9"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""abca4c51-2acf-4668-afbc-c76f552c69af"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""d8445efe-e94e-4692-a366-54a7c692bc96"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""5993f27f-4fb7-4614-ae9d-e03cf0d6fc73"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""1d853dc2-cb22-4b73-a44a-3f6604f7279a"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""scroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7d21dd3b-4936-40d1-871d-c1f629abfa81"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""mouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8cc813a5-4ee3-4ab7-b855-be5a512a0140"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""center"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""player"",
            ""id"": ""c7824d49-796a-4125-8b4f-7f45e07b91cc"",
            ""actions"": [
                {
                    ""name"": ""movement"",
                    ""type"": ""Value"",
                    ""id"": ""8e27e610-e8fb-4f34-afc6-e573123f8a19"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""36038db1-3e4b-4d02-81a7-c3cb2d3ce0e1"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""8f696d13-08d5-4c13-853a-7cf450dd084b"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""d7a663eb-b97c-46b1-9f58-99f33a7c5631"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""53c7e42c-76d9-4ac8-91ef-75cd87c5ef84"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""e97062ac-98ef-49d3-868d-a17111d953f3"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""hackSlash"",
            ""id"": ""a79cf288-42dd-4429-9def-1889914b6c30"",
            ""actions"": [
                {
                    ""name"": ""movement"",
                    ""type"": ""Value"",
                    ""id"": ""5a65cf9d-69d7-4726-aae1-d643ef0f81d7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""attack"",
                    ""type"": ""Button"",
                    ""id"": ""018d466e-48ca-4e51-b8a0-e3722bf0accd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""098f2181-aac3-44dc-bc98-d72893280b70"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""874715a6-a324-42e2-8c78-373629c06d47"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""8e45c6d0-d03a-4fbb-9f34-b7eaebaa329f"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""c5ba16e2-5d39-4a0d-9276-b9c60086d393"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""a63683a8-82d2-45ae-99d9-48d4840a161c"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""a83ec714-fa0c-414c-bc1e-de27a29b64f8"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""sim"",
            ""id"": ""9fc7ebf5-dee5-41fb-bfe4-32a85d442b7e"",
            ""actions"": [
                {
                    ""name"": ""leftClick"",
                    ""type"": ""Button"",
                    ""id"": ""53d0c37c-4e23-4ac0-8776-e08a62a0dd52"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""rightClick"",
                    ""type"": ""Button"",
                    ""id"": ""7fed80b5-7b1e-48bf-9439-63fa931386af"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8d15c7b7-94af-4ad2-be56-530d35a2bcb2"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""leftClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c3d86117-9d80-4ff4-8014-e1ce4cc1d3c2"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""rightClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // defence
            m_defence = asset.FindActionMap("defence", throwIfNotFound: true);
            m_defence_left = m_defence.FindAction("left", throwIfNotFound: true);
            m_defence_right = m_defence.FindAction("right", throwIfNotFound: true);
            m_defence_move = m_defence.FindAction("move", throwIfNotFound: true);
            m_defence_scroll = m_defence.FindAction("scroll", throwIfNotFound: true);
            m_defence_mouse = m_defence.FindAction("mouse", throwIfNotFound: true);
            m_defence_center = m_defence.FindAction("center", throwIfNotFound: true);
            // player
            m_player = asset.FindActionMap("player", throwIfNotFound: true);
            m_player_movement = m_player.FindAction("movement", throwIfNotFound: true);
            // hackSlash
            m_hackSlash = asset.FindActionMap("hackSlash", throwIfNotFound: true);
            m_hackSlash_movement = m_hackSlash.FindAction("movement", throwIfNotFound: true);
            m_hackSlash_attack = m_hackSlash.FindAction("attack", throwIfNotFound: true);
            // sim
            m_sim = asset.FindActionMap("sim", throwIfNotFound: true);
            m_sim_leftClick = m_sim.FindAction("leftClick", throwIfNotFound: true);
            m_sim_rightClick = m_sim.FindAction("rightClick", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // defence
        private readonly InputActionMap m_defence;
        private IDefenceActions m_DefenceActionsCallbackInterface;
        private readonly InputAction m_defence_left;
        private readonly InputAction m_defence_right;
        private readonly InputAction m_defence_move;
        private readonly InputAction m_defence_scroll;
        private readonly InputAction m_defence_mouse;
        private readonly InputAction m_defence_center;
        public struct DefenceActions
        {
            private @PlayerInput m_Wrapper;
            public DefenceActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @left => m_Wrapper.m_defence_left;
            public InputAction @right => m_Wrapper.m_defence_right;
            public InputAction @move => m_Wrapper.m_defence_move;
            public InputAction @scroll => m_Wrapper.m_defence_scroll;
            public InputAction @mouse => m_Wrapper.m_defence_mouse;
            public InputAction @center => m_Wrapper.m_defence_center;
            public InputActionMap Get() { return m_Wrapper.m_defence; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(DefenceActions set) { return set.Get(); }
            public void SetCallbacks(IDefenceActions instance)
            {
                if (m_Wrapper.m_DefenceActionsCallbackInterface != null)
                {
                    @left.started -= m_Wrapper.m_DefenceActionsCallbackInterface.OnLeft;
                    @left.performed -= m_Wrapper.m_DefenceActionsCallbackInterface.OnLeft;
                    @left.canceled -= m_Wrapper.m_DefenceActionsCallbackInterface.OnLeft;
                    @right.started -= m_Wrapper.m_DefenceActionsCallbackInterface.OnRight;
                    @right.performed -= m_Wrapper.m_DefenceActionsCallbackInterface.OnRight;
                    @right.canceled -= m_Wrapper.m_DefenceActionsCallbackInterface.OnRight;
                    @move.started -= m_Wrapper.m_DefenceActionsCallbackInterface.OnMove;
                    @move.performed -= m_Wrapper.m_DefenceActionsCallbackInterface.OnMove;
                    @move.canceled -= m_Wrapper.m_DefenceActionsCallbackInterface.OnMove;
                    @scroll.started -= m_Wrapper.m_DefenceActionsCallbackInterface.OnScroll;
                    @scroll.performed -= m_Wrapper.m_DefenceActionsCallbackInterface.OnScroll;
                    @scroll.canceled -= m_Wrapper.m_DefenceActionsCallbackInterface.OnScroll;
                    @mouse.started -= m_Wrapper.m_DefenceActionsCallbackInterface.OnMouse;
                    @mouse.performed -= m_Wrapper.m_DefenceActionsCallbackInterface.OnMouse;
                    @mouse.canceled -= m_Wrapper.m_DefenceActionsCallbackInterface.OnMouse;
                    @center.started -= m_Wrapper.m_DefenceActionsCallbackInterface.OnCenter;
                    @center.performed -= m_Wrapper.m_DefenceActionsCallbackInterface.OnCenter;
                    @center.canceled -= m_Wrapper.m_DefenceActionsCallbackInterface.OnCenter;
                }
                m_Wrapper.m_DefenceActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @left.started += instance.OnLeft;
                    @left.performed += instance.OnLeft;
                    @left.canceled += instance.OnLeft;
                    @right.started += instance.OnRight;
                    @right.performed += instance.OnRight;
                    @right.canceled += instance.OnRight;
                    @move.started += instance.OnMove;
                    @move.performed += instance.OnMove;
                    @move.canceled += instance.OnMove;
                    @scroll.started += instance.OnScroll;
                    @scroll.performed += instance.OnScroll;
                    @scroll.canceled += instance.OnScroll;
                    @mouse.started += instance.OnMouse;
                    @mouse.performed += instance.OnMouse;
                    @mouse.canceled += instance.OnMouse;
                    @center.started += instance.OnCenter;
                    @center.performed += instance.OnCenter;
                    @center.canceled += instance.OnCenter;
                }
            }
        }
        public DefenceActions @defence => new DefenceActions(this);

        // player
        private readonly InputActionMap m_player;
        private IPlayerActions m_PlayerActionsCallbackInterface;
        private readonly InputAction m_player_movement;
        public struct PlayerActions
        {
            private @PlayerInput m_Wrapper;
            public PlayerActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @movement => m_Wrapper.m_player_movement;
            public InputActionMap Get() { return m_Wrapper.m_player; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
            public void SetCallbacks(IPlayerActions instance)
            {
                if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
                {
                    @movement.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovement;
                    @movement.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovement;
                    @movement.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovement;
                }
                m_Wrapper.m_PlayerActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @movement.started += instance.OnMovement;
                    @movement.performed += instance.OnMovement;
                    @movement.canceled += instance.OnMovement;
                }
            }
        }
        public PlayerActions @player => new PlayerActions(this);

        // hackSlash
        private readonly InputActionMap m_hackSlash;
        private IHackSlashActions m_HackSlashActionsCallbackInterface;
        private readonly InputAction m_hackSlash_movement;
        private readonly InputAction m_hackSlash_attack;
        public struct HackSlashActions
        {
            private @PlayerInput m_Wrapper;
            public HackSlashActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @movement => m_Wrapper.m_hackSlash_movement;
            public InputAction @attack => m_Wrapper.m_hackSlash_attack;
            public InputActionMap Get() { return m_Wrapper.m_hackSlash; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(HackSlashActions set) { return set.Get(); }
            public void SetCallbacks(IHackSlashActions instance)
            {
                if (m_Wrapper.m_HackSlashActionsCallbackInterface != null)
                {
                    @movement.started -= m_Wrapper.m_HackSlashActionsCallbackInterface.OnMovement;
                    @movement.performed -= m_Wrapper.m_HackSlashActionsCallbackInterface.OnMovement;
                    @movement.canceled -= m_Wrapper.m_HackSlashActionsCallbackInterface.OnMovement;
                    @attack.started -= m_Wrapper.m_HackSlashActionsCallbackInterface.OnAttack;
                    @attack.performed -= m_Wrapper.m_HackSlashActionsCallbackInterface.OnAttack;
                    @attack.canceled -= m_Wrapper.m_HackSlashActionsCallbackInterface.OnAttack;
                }
                m_Wrapper.m_HackSlashActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @movement.started += instance.OnMovement;
                    @movement.performed += instance.OnMovement;
                    @movement.canceled += instance.OnMovement;
                    @attack.started += instance.OnAttack;
                    @attack.performed += instance.OnAttack;
                    @attack.canceled += instance.OnAttack;
                }
            }
        }
        public HackSlashActions @hackSlash => new HackSlashActions(this);

        // sim
        private readonly InputActionMap m_sim;
        private ISimActions m_SimActionsCallbackInterface;
        private readonly InputAction m_sim_leftClick;
        private readonly InputAction m_sim_rightClick;
        public struct SimActions
        {
            private @PlayerInput m_Wrapper;
            public SimActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @leftClick => m_Wrapper.m_sim_leftClick;
            public InputAction @rightClick => m_Wrapper.m_sim_rightClick;
            public InputActionMap Get() { return m_Wrapper.m_sim; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(SimActions set) { return set.Get(); }
            public void SetCallbacks(ISimActions instance)
            {
                if (m_Wrapper.m_SimActionsCallbackInterface != null)
                {
                    @leftClick.started -= m_Wrapper.m_SimActionsCallbackInterface.OnLeftClick;
                    @leftClick.performed -= m_Wrapper.m_SimActionsCallbackInterface.OnLeftClick;
                    @leftClick.canceled -= m_Wrapper.m_SimActionsCallbackInterface.OnLeftClick;
                    @rightClick.started -= m_Wrapper.m_SimActionsCallbackInterface.OnRightClick;
                    @rightClick.performed -= m_Wrapper.m_SimActionsCallbackInterface.OnRightClick;
                    @rightClick.canceled -= m_Wrapper.m_SimActionsCallbackInterface.OnRightClick;
                }
                m_Wrapper.m_SimActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @leftClick.started += instance.OnLeftClick;
                    @leftClick.performed += instance.OnLeftClick;
                    @leftClick.canceled += instance.OnLeftClick;
                    @rightClick.started += instance.OnRightClick;
                    @rightClick.performed += instance.OnRightClick;
                    @rightClick.canceled += instance.OnRightClick;
                }
            }
        }
        public SimActions @sim => new SimActions(this);
        public interface IDefenceActions
        {
            void OnLeft(InputAction.CallbackContext context);
            void OnRight(InputAction.CallbackContext context);
            void OnMove(InputAction.CallbackContext context);
            void OnScroll(InputAction.CallbackContext context);
            void OnMouse(InputAction.CallbackContext context);
            void OnCenter(InputAction.CallbackContext context);
        }
        public interface IPlayerActions
        {
            void OnMovement(InputAction.CallbackContext context);
        }
        public interface IHackSlashActions
        {
            void OnMovement(InputAction.CallbackContext context);
            void OnAttack(InputAction.CallbackContext context);
        }
        public interface ISimActions
        {
            void OnLeftClick(InputAction.CallbackContext context);
            void OnRightClick(InputAction.CallbackContext context);
        }
    }
}
